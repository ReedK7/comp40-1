
div:
        push r1 on stack r2
        push r3 on stack r2
        push r4 on stack r2

        r3 := m[r0][r2+3]
        if (r3 == 0) goto cancel_divide 
	
        r4 := m[r0][r2+4]
        r1 := r4 / r3

        pop r4 off stack r2
        pop r3 off stack r2
        pop r5 off stack r2
        push r1 on stack r2 
        goto r5
        
cancel_divide: 
	output "Attempted to divide by 0" 
	pop r4 off stack r2 
	pop r3 off stack r2 
	pop r5 off stack r2 
	goto r5 
        
mul:
        push r1 on stack r2
        push r3 on stack r2
        push r4 on stack r2

        r3 := m[r0][r2+3]
        r4 := m[r0][r2+4]
        r1 := r4 * r3

        pop r4 off stack r2
        pop r3 off stack r2
        pop r5 off stack r2
        push r1 on stack r2 
        r4 := r4 + 1
        goto r5 
        
add:
        push r1 on stack r2
        push r3 on stack r2
        push r4 on stack r2

        r3 := m[r0][r2+3]
        r4 := m[r0][r2+4]
        r1 := r4 + r3

        pop r4 off stack r2
        pop r3 off stack r2
        pop r5 off stack r2
        push r1 on stack r2
        r4 := r4 + 1
        goto r5
sub:
        push r1 on stack r2
        push r3 on stack r2
        push r4 on stack r2

        r3 := m[r0][r2+3]
        r4 := m[r0][r2+4]
        r1 := r4 - r3 

        pop r4 off stack r2
        pop r3 off stack r2
        pop r5 off stack r2
        push r1 on stack r2 
        r4 := r4 + 1
        goto r5
swap:
        push r3 on stack r2
        push r4 on stack r2

        r3 := m[r0][r2+2]
        m[r0][r2+2] := m[r0][r2+3]
        m[r0][r2+3] := r3

        pop r4 off stack r2
        pop r3 off stack r2
        goto r1
dup:
        pop r6 off stack r2
        push r6 on stack r2
        push r6 on stack r2
        r4 := r4 + 1
        goto r1

popit:
        pop stack r2
        r4 := r4 - 1
        goto r5

change:
        push r3 on stack r2
        push r4 on stack r2
        push r1 on stack r2 // save return address  

        r3 := m[r0][r2+1] // load argument into r3
        r1 := -r3

        pop r5 off stack r2 //return
        pop r4 off stack r2
        pop r3 off stack r2
        push r1 on stack r2 
        r4 := r4 + 1
        goto r5

and:
	push r1 on stack r2 // save return address
	push r3 on stack r2 // save nonvolatile registers
	push r4 on stack r2 
					
	r3 := m[r0][r2+3] // load argument into r3
	r4 := m[r0][r2+4] //load argument into r4
	r1 := r3 & r4 
				
	pop r4 off stack r2 // restore nonvolatile registers
	pop r3 off stack r2
	pop r5 off stack r2 // put return address in r5
	push r1 on stack r2 
	r4 := r4 + 1
	goto r5 // return

or:
        push r1 on stack r2 // save return address
        push r3 on stack r2 // save nonvolatile registers
        Push r4 on stack r2 

        r3 := m[r0][r2+3] // load argument into r3
        r4 := m[r0][r2+4] //load argument into r4 
        r1 := r3 | r4 

        pop r4 off stack r2 // restore nonvolatile registers
        pop r3 off stack r2
        pop r5 off stack r2 // put return address in r5
        push r1 on stack r2 
        r4 := r4 + 1
        goto r5 // return

comp:
       push r1 on stack r2
       push r3 on stack r2

       r3 := m[r0][r2+2]  //load first argument into r3 
       r1 := ~r3 
 
       pop r3 off stack r2 //save nonvolatiles 
       pop r5 off stack r2 
       push r1 on stack r2 
       r4 := r4 + 1
       goto r5 //return 
